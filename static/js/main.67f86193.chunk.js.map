{"version":3,"sources":["components/header.js","components/city_list.js","config.js","common/utils.js","components/current_weather.js","components/daily_weather.js","components/city_weather.js","components/app.js","index.js"],"names":["Header","className","id","to","exact","activeClassName","CityList","List","divided","verticalAlign","city","map","index","Item","key","onClick","props","history","push","data","Content","floated","Icon","Component","config","API_KEY","convertKelvinToCelcius","temp","parseInt","formatDateTime","timestamp","option","dateMS","Date","weekday","getDay","date","getDate","month","getMonth","year","getFullYear","padZero","getHours","getMinutes","value","capitaliseFirstLetter","charAt","toUpperCase","slice","CurrentWeather","state","isLoading","results","this","getWeather","fetch","lat","lon","then","res","json","setState","handleState","daily","catch","console","log","size","current","dt","weather","description","alt","src","icon","DailyWeather","item","Card","Meta","Description","day","CityWeather","bind","location","App","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67f86193.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport const Header = () => {\n  return (\n    <div className='weather_header'>\n      <div id='logo'>\n        <h1>Weather App</h1>\n      </div>\n      <div id='navigation'>\n        <nav>\n          <ul>\n            <li><NavLink to='/' exact activeClassName='selected'>Home</NavLink></li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport { List, Icon } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\nclass CityList extends Component {\n  render () {\n    // Hard-coded array of cities with their corresponding latitude and longitude\n    const cities = [\n      { city: 'Wolverhampton', 'lat': 52.586971, 'lon': -2.128820 },\n      { city: 'Birmingham', 'lat': 33.518589, 'lon': -86.810356 },\n      { city: 'Manchester', 'lat': 53.480759, 'lon': -2.242631 },\n      { city: 'London', 'lat': 51.507351, 'lon': -0.127758 }\n    ]\n\n    return (\n      <div className='city'>\n        <List divided verticalAlign='middle'>\n          {cities.map((city, index) =>\n            <List.Item key={index} onClick={() => this.props.history.push(`/weather/${city.city}`, { data: city } )}>\n              <List.Content floated='right'>\n                <Icon className='chevron right icon'/>\n              </List.Content>\n              <List.Content>\n                <List.Header>{city.city}</List.Header>\n                Great Britain, UK\n              </List.Content>\n            </List.Item>\n          )}\n        </List>\n      </div>\n    )\n  }\n}\n\nexport default CityList\n","const config = {\n  API_KEY: '4a9f634c04ebf82a1fecb620e5e66505'\n}\n\nexport default config\n","  /**\n   * Converts temp from kelvin to celcius and returns it\n   * @param {int} temp Integer value to convert\n   */\n  export const convertKelvinToCelcius = (temp) => {\n    temp = temp - 273.15\n    return parseInt(temp)\n  }\n\n  /**\n   * Converts timestamp to date and returns the formatted date or time\n   * @param {int} timestamp\n   */\n  export const formatDateTime = (timestamp, option) => {\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    const dailyDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    const dateMS = new Date(timestamp * 1000)\n    const weekday = dateMS.getDay()\n    const date = dateMS.getDate()\n    const month = dateMS.getMonth()\n    const year = dateMS.getFullYear()\n\n    if (option === 'date') {\n      return `${days[weekday]}, ${date} ${months[month]} ${year}`\n    } else if (option === 'time') {\n      return padZero(dateMS.getHours()) + ':' + padZero(dateMS.getMinutes())\n    } else {\n      return `${dailyDays[weekday]} ${date}`\n    }\n  }\n\n  /**\n   * Pads the integer value with a zero if it is less than 10\n   * @param {int} value Value to check\n   */\n  export const padZero = (value) => {\n    return value < 10 ? `0${value}` : value\n  }\n\n  /**\n   * Accepts a string and returns it with the first letter capitialised\n   * @param {string} value String value to capitalise\n   */\n  export const capitaliseFirstLetter = (value) => {\n    return value.charAt(0).toUpperCase() + value.slice(1)\n  }\n","import React, { Component } from 'react'\nimport config from '../config.js'\nimport { Icon } from 'semantic-ui-react'\nimport { convertKelvinToCelcius, formatDateTime, capitaliseFirstLetter } from '../common/utils.js'\n\nclass CurrentWeather extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      results: []\n    }\n  }\n\n  componentDidMount () {\n    this.getWeather()\n  }\n\n  /**\n   * Invokes openweathermap api to retrieve weather results\n   */\n  getWeather () {\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.props.data.lat}&lon=${this.props.data.lon}&exclude=minutely&appid=${config.API_KEY}`)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          results: data,\n          isLoading: false\n        })\n        this.props.handleState(this.state.results.daily)\n      })\n      .catch(console.log)\n  }\n\n  render () {\n    if (this.state.isLoading) {\n      return (\n        <div className='current_weather'>\n          <Icon className='spinner icon' size='big'/><br/>\n          <p>Loading</p>\n        </div>\n      )\n    }\n\n    const current = this.state.results.current\n    return (\n      <div className='current_weather'>\n        <h3>{formatDateTime(current.dt, 'date')}</h3>\n        <h1>{formatDateTime(current.dt, 'time')}</h1>\n        <h3>{this.props.data.city}</h3>\n        <p className='weather_text'>{capitaliseFirstLetter(current.weather[0].description)}</p>\n        <img alt='icon' src={`http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`}/>\n        <p className='weather_text' id='temp'>{convertKelvinToCelcius(current.temp)}&deg;C</p>\n      </div>\n    )\n  }\n}\n\nexport default CurrentWeather\n","import React, { Component } from 'react'\nimport { Card } from 'semantic-ui-react'\nimport { convertKelvinToCelcius, formatDateTime, capitaliseFirstLetter } from '../common/utils.js'\n\nclass DailyWeather extends Component {\n  constructor (props) {\n    super(props)\n  }\n\n  render () {\n    return (\n      <div className='daily_weather_scrolling'>\n        {this.props.daily.slice(1).map((item, index) =>\n          <Card key={index}>\n            <Card.Content>\n              <Card.Header>{formatDateTime(item.dt, 'daily')}</Card.Header>\n              <Card.Meta>{capitaliseFirstLetter(item.weather[0].description)}</Card.Meta>\n              <img alt='icon' src={`http://openweathermap.org/img/wn/${item.weather[0].icon}.png`}/>\n              <Card.Description>{convertKelvinToCelcius(item.temp.day)}&deg;C</Card.Description>\n            </Card.Content>\n          </Card>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default DailyWeather\n","import React, { Component } from 'react'\nimport CurrentWeather from './current_weather.js'\nimport DailyWeather from './daily_weather.js'\n\n\nclass CityWeather extends Component {\n  constructor (props) {\n    super(props)\n    this.handleState = this.handleState.bind(this)\n  }\n\n  handleState (daily) {\n    this.setState({\n      daily: daily\n    })\n  }\n\n  render () {\n    if (this.state !== null) {\n      return (\n        <div>\n          <CurrentWeather handleState={this.handleState} data={this.props.location.state.data} />\n          <DailyWeather daily={this.state.daily} />\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <CurrentWeather handleState={this.handleState} data={this.props.location.state.data} />\n      </div>\n    )\n  }\n}\n\nexport default CityWeather\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Header from './header.js'\nimport CityList from './city_list.js'\nimport CityWeather from './city_weather.js'\n\nfunction App () {\n  return (\n    <div className='container'>\n      <Router>\n        <Header/>\n        <Switch>\n          <Route exact path='/' component={CityList}/>\n          <Route path='/weather/:city' component={CityWeather}/>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/stylesheet.css'\nimport App from './components/app.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}